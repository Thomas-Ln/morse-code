{"version":3,"sources":["morse-pro/src/morse-pro.js","morse-pro/src/morse-pro-wpm.js","morse-pro/src/morse-pro-cw-wave.js","morse-pro/src/morse-pro-cw.js","morse-pro/src/morse-pro-message.js","morse-pro/src/morse-pro-player-waa-light.js","morse-pro/src/morse-pro-player-waa.js","components/MorseModal.js","components/Button.js","helpers/download.js","App.js","serviceWorker.js","index.js"],"names":["String","prototype","trim","this","replace","text2morseH","'","morse2textH","prosign2morseH","morsepro2textH","text2morseproH","text","sign","tidyText","toUpperCase","text2morse","useProsigns","ret","morse","message","hasError","prosign","token_length","dict","i","c","t","tokens","length","match","push","slice","undefined","tidyMorse","morse2text","split","ditLength","wpm","Math","round","_ditLength","MS_IN_MINUTE","wordSpace","fwpm","_fditLength","ratio","MorseCWWave","frequency","sampleRate","endPadding","getSampleGeneral","getTimings","max","timings","offlineAudioContextClass","window","OfflineAudioContext","webkitOfflineAudioContext","Error","offlineCtx","getDuration","gainNode","createGain","gain","setValueAtTime","lowPassNode","createBiquadFilter","type","connect","destination","oscillator","duration","abs","createOscillator","start","stop","startRendering","then","renderedBuffer","getChannelData","sample","x0","y0","lowpassFreq","q","SQRT1_2","sin","PI","cos","alpha","pow","a0","b0","b1","b2","a1","a2","step","on","x1","x2","y1","y2","MorseCW","getTimingsGeneral","WPM","_wpm","_fwpm","times","dit","dah","ditSpace","charSpace","input","output","inputWasMorse","isMorse","translation","Morse","MorsePlayerWAALight","sequenceStartCallback","sequenceEndingCallback","soundStoppedCallback","soundOnCallback","soundOffCallback","_wasOn","_count","jsNode","audioContext","createScriptProcessor","onaudioprocess","_processSound","bind","splitterNode","_timings","event","inputBuffer","sum","_on","_off","noteNumber","_noAudio","console","log","audioContextClass","AudioContext","webkitAudioContext","loop","startPadding","_cTimings","_isPlaying","_isPaused","_volume","_lookAheadTime","_timerInterval","_timer","_stopTimer","_notPlayedANote","currentTime","volume","cwWave","load","isNote","sequenceLength","loadNext","upNext","_initialiseAudioNodes","_nextNote","play","playFromStart","clearInterval","_startTimer","_tZero","_scheduleNotes","setInterval","close","end","now","sequenceStartCallbackFired","setTimeout","_soundEndTime","v","min","ex","MorseModal","modalContent","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","className","src","alt","Footer","variant","onClick","onHide","Button","iconStyle","icon","title","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","App","useState","setInput","setOutput","audioPlayer","setAudioPlayer","React","modalShow","setModalShow","querySelector","focus","data-toggle","data-target","onChange","value","currentTarget","translate","autoFocus","placeholder","animate","transform","toast","error","autoClose","info","isPlaying","morseCWWave","audioBtn","toggleIcon","firstElementChild","classList","toggle","morsePlayerWAALight","add","remove","loadCWWave","show","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","transition","Slide","pauseOnHover","href","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ebf4e67c.chunk.js","sourcesContent":["/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Basic methods to translate Morse code.\n */\n\nif (typeof(String.prototype.trim) === \"undefined\") {\n    String.prototype.trim = function() {\n        return String(this).replace(/^\\s+|\\s+$/g, '');\n    };\n}\n\nvar text2morseH = {\n    'A': \".-\",\n    'B': \"-...\",\n    'C': \"-.-.\",\n    'D': \"-..\",\n    'E': \".\",\n    'F': \"..-.\",\n    'G': \"--.\",\n    'H': \"....\",\n    'I': \"..\",\n    'J': \".---\",\n    'K': \"-.-\",\n    'L': \".-..\",\n    'M': \"--\",\n    'N': \"-.\",\n    'O': \"---\",\n    'P': \".--.\",\n    'Q': \"--.-\",\n    'R': \".-.\",\n    'S': \"...\",\n    'T': \"-\",\n    'U': \"..-\",\n    'V': \"...-\",\n    'W': \".--\",\n    'X': \"-..-\",\n    'Y': \"-.--\",\n    'Z': \"--..\",\n    '1': \".----\",\n    '2': \"..---\",\n    '3': \"...--\",\n    '4': \"....-\",\n    '5': \".....\",\n    '6': \"-....\",\n    '7': \"--...\",\n    '8': \"---..\",\n    '9': \"----.\",\n    '0': \"-----\",\n    '.': \".-.-.-\",\n    ',': \"--..--\",\n    ':': \"---...\",\n    '?': \"..--..\",\n    '\\'': \".----.\",\n    '-': \"-....-\",\n    '/': \"-..-.\",\n    '(': \"-.--.\",\n    ')': \"-.--.-\",\n    '\"': \".-..-.\",\n    '@': \".--.-.\",\n    '=': \"-...-\",\n    '&': \".-...\",\n    '+': \".-.-.\",\n    '!': \"-.-.--\",\n    ' ': \"/\" //Not morse but helps translation\n};\nvar morse2textH = {};\nvar prosign2morseH = {\n    '<AA>': '.-.-',\n    '<AR>': '.-.-.',\n    '<AS>': '.-...',\n    '<BK>': '-...-.-',\n    '<BT>': '-...-', // also <TV>\n    '<CL>': '-.-..-..',\n    '<CT>': '-.-.-',\n    '<DO>': '-..---',\n    '<KN>': '-.--.',\n    '<SK>': '...-.-', // also <VA>\n    '<VA>': '...-.-',\n    '<SN>': '...-.', // also <VE>\n    '<VE>': '...-.',\n    '<SOS>': '...---...'\n};\nvar morsepro2textH = {};\nvar text2morseproH = {};\nfor (var text in text2morseH) {\n    text2morseproH[text] = text2morseH[text];\n    morse2textH[text2morseH[text]] = text;\n    morsepro2textH[text2morseH[text]] = text;\n}\nfor (var sign in prosign2morseH) {\n    text2morseproH[sign] = prosign2morseH[sign];\n    morsepro2textH[prosign2morseH[sign]] = sign;\n}\n\nvar tidyText = function(text) {\n    text = text.toUpperCase();\n    text = text.trim();\n    text = text.replace(/\\s+/g, ' ');\n    return text;\n};\n\n/**\n * Translate text to morse in '..- .. / --' form.\n * If something in the text is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the morse.\n * @param {string} text - alphanumeric message\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {{message: string, morse: string, hasError: boolean}}\n */\nexport function text2morse(text, useProsigns = true) {\n    text = tidyText(text);\n    var ret = {\n        morse: \"\",\n        message: \"\",\n        hasError: false\n    };\n    if (text === \"\") {\n        return ret;\n    }\n\n    var tokens = [];\n    var prosign;\n    var token_length;\n    while (text.length > 0) {\n        token_length = 1;\n        if (useProsigns) {\n            prosign = text.match(/^<...?>/); // array of matches\n            if (prosign) {\n                token_length = prosign[0].length;\n            }\n        }\n        tokens.push(text.slice(0, token_length));\n        text = text.slice(token_length, text.length);\n    }\n    var dict;\n    if (useProsigns) {\n        dict = text2morseproH;\n    } else {\n        dict = text2morseH;\n    }\n    var i, c, t;\n    for (i = 0; i < tokens.length; i++) {\n        t = tokens[i];\n        c = dict[t];\n        if (c === undefined) {\n            ret.message += \"#\" + t + \"#\";\n            ret.morse += \"# \";\n            ret.hasError = true;\n        } else {\n            ret.message += t;\n            ret.morse += c + \" \";\n        }\n    }\n    ret.morse = ret.morse.slice(0, ret.morse.length - 1);\n    return ret;\n}\n\n/**\n * Translate text to morse in 'Di-di-dah dah' form.\n * @param {string} text - alphanumeric message\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {string}\n */\nexport function text2ditdah(text, useProsigns) {\n    // TODO: deal with errors in the translation\n    var ditdah = text2morse(text, useProsigns).morse + ' '; // get the dots and dashes\n    ditdah = ditdah.replace(/\\./g, 'di~').replace(/\\-/g, 'dah~'); // do the basic job\n    ditdah = ditdah.replace(/~/g, '-'); // replace placeholder with dash\n    ditdah = ditdah.replace(/\\- /g, ' '); // remove trailing dashes\n    ditdah = ditdah.replace(/di /g, 'dit '); // use 'dit' at end of letter\n    ditdah = ditdah.replace(/ \\/ /g, ', '); // do punctuation\n    ditdah = ditdah.replace(/^d/, 'D'); // do capitalisation\n    ditdah = ditdah.replace(/ $/, ''); // remove the space we added\n    ditdah = ditdah.replace(/([th])$/, '$1.'); // add full-stop if there is anything there\n    return ditdah;\n}\n\n/**\n * Canonicalise morse text.\n * Canonical form matches [.-/ ]*, has single spaces between characters, has words separated by ' / ', and has no spaces at the start or end.\n * A single '/' may be returned by this function.\n * @param {string} morse - Morse code matching [.-_/| ]*\n * @return {string} Morse code in canonical form matching [.-/ ]*\n */\nvar tidyMorse = function(morse) {\n    morse = morse.replace(/\\|/g, \"/\"); // unify the word separator\n    morse = morse.replace(/\\//g, \" / \"); // make sure word separators are spaced out\n    morse = morse.replace(/\\s+/g, \" \"); // squash multiple spaces into single spaces\n    morse = morse.replace(/(\\/ )+\\//g, \"/\"); // squash multiple word separators\n    morse = morse.replace(/_/g, \"-\"); // unify the dash character\n    morse = morse.replace(/^\\s+/, \"\");  // remove initial whitespace\n    morse = morse.replace(/\\s+$/, \"\");  // remove trailing whitespace\n    return morse;\n};\n\n/**\n * Translate morse to text. Canonicalise the morse first.\n * If something in the morse is untranslatable then it is surrounded by hash-signs ('#') and a hash is placed in the text.\n * @param {string} morse - morse message using [.-_/| ] characters\n * @param {boolean} useProsigns - true if prosigns are to be used (default is true)\n * @return {{message: string, morse: string, hasError: boolean}}\n */\nexport function morse2text(morse, useProsigns = true) {\n    morse = tidyMorse(morse);\n    var ret = {\n        morse: \"\",\n        message: \"\",\n        hasError: false\n    };\n    if (morse === \"\") {\n        return ret;\n    }\n\n    var tokens = morse.split(\" \");\n    var dict;\n    if (useProsigns) {\n        dict = morsepro2textH;\n    } else {\n        dict = morse2textH;\n    }\n    var c, t;\n    for (var i = 0; i < tokens.length; i++) {\n        t = tokens[i];\n        c = dict[t];\n        if (c === undefined) {\n            ret.morse += \"#\" + t + \"# \";\n            ret.message += \"#\";\n            ret.hasError = true;\n        } else {\n            ret.morse += t + \" \";\n            ret.message += c;\n        }\n    }\n    ret.morse = ret.morse.slice(0, ret.morse.length - 1);\n    return ret;\n}\n\n/**\n * Determine whether a string is most likely morse code.\n * @param {string} input - the text\n * @return {boolean} - true if the string only has Morse characters in after executing tidyMorse\n */\nexport function looksLikeMorse(input) {\n    input = tidyMorse(input);\n    return (input.match(/^[/.-][ /.-]*$/) !== null);\n}\n","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Useful constants and functions for computing the speed of Morse code.\n */\n\nconst DITS_PER_WORD = 50;  /** dits in \"PARIS \" */\nconst SPACES_IN_PARIS = 19;  /** 5x 3-dit inter-character spaces + 1x 7-dit space */\nconst MS_IN_MINUTE = 60000;  /** number of milliseconds in 1 minute */\n\n/** Get the dit length in ms\n * @param {number} wpm - speed in words per minute\n * @return {integer}\n */\nexport function ditLength(wpm) {\n    return Math.round(_ditLength(wpm));\n}\n\nfunction _ditLength(wpm) {\n    return (MS_IN_MINUTE / DITS_PER_WORD) / wpm;\n}\n\n/**\n * Get the dah length in ms\n * @param {number} wpm - speed in words per minute\n * @return {integer}\n */\nexport function dahLength(wpm) {\n    return Math.round(3 * _ditLength(wpm));\n}\n\n/**\n * Get the dit space in ms\n * @param {number} wpm - speed in words per minute\n * @return {integer}\n */\nexport function ditSpace(wpm) {\n    return ditLength(wpm)\n}\n\n/**\n * Get the character-space in ms\n * @param {number} wpm - speed in words per minute\n * @param {number} [fwpm = wpm] - Farnsworth speed in words per minute\n * @return {integer}\n */\nexport function charSpace(wpm, fwpm = wpm) {\n    return Math.round(3 * _fditLength(wpm, fwpm));\n}\n\n/**\n * Get the word-space in ms\n * @param {number} wpm - speed in words per minute\n * @param {number} [fwpm = wpm] - Farnsworth speed in words per minute\n * @return {integer}\n */\nexport function wordSpace(wpm, fwpm = wpm) {\n    return Math.round(7 * _fditLength(wpm, fwpm));\n}\n\n/**\n * Get the WPM for a given dit length in ms\n * @return {number}\n */\nexport function wpm(ditLen) {\n    return (MS_IN_MINUTE / DITS_PER_WORD) / ditLen;\n}\n\n/**\n * Get the Farnsworth dit length in ms for a given WPM and Farnsworth WPM. Note, actual dit-spaces should not be slowed down\n * @return {integer}\n */\nexport function fditLength(wpm, fwpm) {\n    return Math.round(_fditLength(wpm, fwpm));\n}\n\nfunction _fditLength(wpm, fwpm) {\n    return _ditLength(wpm) * ratio(wpm, fwpm);\n}\n\n/**\n * Get the dit length ratio for a given WPM and Farnsworth WPM\n * @param {number} wpm - speed in words per minute\n * @param {number} fwpm - Farnsworth speed in words per minute\n * @return {number}\n */\nexport function ratio(wpm, fwpm) {\n    // \"PARIS \" is 31 units for the characters and 19 units for the inter-character spaces and inter-word space\n    // One unit takes 1 * 60 / (50 * wpm)\n    // The 31 units should take 31 * 60 / (50 * wpm) seconds at wpm\n    // \"PARIS \" should take 50 * 60 / (50 * fwpm) to transmit at fwpm, or 60 / fwpm  seconds at fwpm\n    // Keeping the time for the characters constant,\n    // The spaces need to take: (60 / fwpm) - [31 * 60 / (50 * wpm)] seconds in total\n    // The spaces are 4 inter-character spaces of 3 units and 1 inter-word space of 7 units. Their ratio must be maintained.\n    // A space unit is: [(60 / fwpm) - [31 * 60 / (50 * wpm)]] / 19 seconds\n    // Comparing that to 60 / (50 * wpm) gives a ratio of (50.wpm - 31.fwpm) / 19.fwpm\n    return (DITS_PER_WORD * wpm - (DITS_PER_WORD - SPACES_IN_PARIS) * fwpm) / (SPACES_IN_PARIS * fwpm);\n}\n\n/** Get the Farnsworth WPM for a given WPM and ratio */\nexport function fwpm(wpm, r) {\n    return DITS_PER_WORD * wpm / (SPACES_IN_PARIS * r + (DITS_PER_WORD - SPACES_IN_PARIS));\n}","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport MorseCW from './morse-pro-cw';\n\n/**\n * Class to create sine-wave samples of standard CW Morse.\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var sample = morseCWWave.getSample();\n */\nexport default class MorseCWWave extends MorseCW {\n    /**\n     * @param {number} [frequency=550] - frequency of wave in Hz\n     * @param {number} [sampleRate=8000] - sample rate for the waveform in Hz\n     */\n    constructor(useProsigns, wpm, fwpm, frequency = 550, sampleRate = 8000) {\n        super(useProsigns, wpm, fwpm);\n        /** @type {number} */\n        this.frequency = frequency;  // frequency of wave in Hz\n        /** @type {number} */\n        this.sampleRate = sampleRate;  // sample rate for the waveform in Hz\n    }\n\n    /**\n     * Get a sample waveform, not using Web Audio API (synchronous).\n     * @param {number} [endPadding=0] - how much silence in ms to add to the end of the waveform.\n     * @return {number[]} an array of floats in range [-1, 1] representing the wave-form.\n     */\n    getSample(endPadding = 0) {\n        return MorseCWWave.getSampleGeneral(this.getTimings(), this.frequency, this.sampleRate, endPadding);\n    }\n\n    /**\n     * Get a sample waveform, not using Web Audio API (synchronous).\n     * @param {number[]} timings - millisecond timings, +ve numbers representing sound, -ve for no sound (+ve/-ve can be in any order)\n     * @param {number} frequency - frequency of sound in Hz.\n     * @param {number} sampleRate - sample rate in Hz.\n     * @param {number} [endPadding=0] - how much silence in ms to add to the end of the waveform.\n     * @return {number[]} an array of floats in range [-1, 1] representing the wave-form.\n     */\n    static getSampleGeneral(timings, frequency, sampleRate, endPadding = 0) {\n        var sample = [];\n        if (timings.length === 0) {\n            return [];\n        }\n        // add minimum of 5ms silence to the end to ensure the filtered signal can finish cleanly\n        timings.push(-Math.max(5, endPadding));\n\n        /*\n            Compute lowpass biquad filter coefficients using method from Chromium\n        */\n\n        // set lowpass frequency cutoff to 1.5 x wave frequency\n        var lowpassFreq = (frequency * 1.5) / sampleRate;\n        var q = Math.SQRT1_2;\n      \n        var sin = Math.sin(2 * Math.PI * lowpassFreq);\n        var cos = Math.cos(2 * Math.PI * lowpassFreq);\n        var alpha = sin / (2 * Math.pow(10, q / 20));\n      \n        var a0 =  1 + alpha;\n\n        var b0 = ((1 - cos) * 0.5) / a0;\n        var b1 = (1 - cos) / a0;\n        var b2 = ((1 - cos) * 0.5) / a0;\n        var a1 = (-2 * cos) / a0;\n        var a2 = (1 - alpha) / a0;\n\n        /*\n            Compute filtered signal\n        */\n\n        var step = Math.PI * 2 * frequency / sampleRate;\n        var on = timings[0] > 0 ? 1 : 0;\n        var x0, x1 = 0, x2 = 0;\n        var y0, y1 = 0, y2 = 0;\n        var gain = 0.813;  // empirically, the lowpass filter outputs waveform of magnitude 1.23, so need to scale it down to avoid clipping\n        for (var t = 0; t < timings.length; t += 1) {\n            var duration = sampleRate * Math.abs(timings[t]) / 1000;\n            for (var i = 0; i < duration; i += 1) {\n                x0 = on * Math.sin(i * step);  // the input signal\n                y0 = b0 * x0 + b1 * x1 + b2 * x2 - a1 * y1 - a2 * y2;\n                sample.push(y0 * gain);\n                x2 = x1;\n                x1 = x0;\n                y2 = y1;\n                y1 = y0;\n            }\n            on = 1 - on;\n        }\n        return sample;\n    }\n\n    /**\n     * Get a sample waveform using Web Audio API (asynchronous).\n     * @param {number} [endPadding=0] - how much silence in ms to add to the end of the waveform.\n     * @return {Promise(number[])} a Promise resolving to an array of floats in range [-1, 1] representing the wave-form.\n     */\n    getWAASample(endPadding = 0) {\n        // add minimum of 5ms silence to the end to ensure the filtered signal can finish cleanly\n        endPadding = Math.max(5, endPadding);\n        var timings = this.getTimings();\n        timings.push(-endPadding);\n        var offlineAudioContextClass = window.OfflineAudioContext || window.webkitOfflineAudioContext;\n        if (offlineAudioContextClass === undefined) {\n            throw new Error(\"No OfflineAudioContext class defined\");\n        }\n        // buffer length is the Morse duration + 5ms to let the lowpass filter end cleanly\n        var offlineCtx = new offlineAudioContextClass(1, this.sampleRate * (this.getDuration() + endPadding) / 1000, this.sampleRate);\n        var gainNode = offlineCtx.createGain();\n        // empirically, the lowpass filter outputs waveform of magnitude 1.23, so need to scale it down to avoid clipping\n        gainNode.gain.setValueAtTime(0.813, 0);\n        var lowPassNode = offlineCtx.createBiquadFilter();\n        lowPassNode.type = \"lowpass\";\n        lowPassNode.frequency.setValueAtTime(this.frequency * 1.1, 0);  // TODO: remove this magic number and make the filter configurable?\n        gainNode.connect(lowPassNode);\n        lowPassNode.connect(offlineCtx.destination);\n        var t = 0;\n        var oscillator;\n        var duration;\n        for (var i = 0; i < timings.length; i++) {\n            duration = Math.abs(timings[i]) / 1000;\n            if (timings[i] > 0) {  // -ve timings are silence\n                oscillator = offlineCtx.createOscillator();\n                oscillator.type = 'sine';\n                oscillator.frequency.setValueAtTime(this.frequency, t);\n                oscillator.start(t);\n                oscillator.stop(t + duration);\n                oscillator.connect(gainNode);\n            }\n            t += duration;\n        }\n        return offlineCtx.startRendering().then(function(renderedBuffer) {\n            return renderedBuffer.getChannelData(0);\n        });\n    }\n}\n","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport * as WPM from './morse-pro-wpm';\nimport MorseMessage from './morse-pro-message';\n\n/**\n * Class to create the on/off timings needed by e.g. sound generators. Timings are in milliseconds; \"off\" timings are negative.\n *\n * @example\n * import MorseCW from 'morse-pro-cw';\n * var morseCW = new MorseCW();\n * morseCW.translate(\"abc\");\n * var timings = morseCW.getTimings();\n */\nexport default class MorseCW extends MorseMessage {\n    /**\n     * @param {boolean} [prosigns=true] - whether or not to include prosigns in the translations\n     * @param {number} [wpm=20] - the speed in words per minute using PARIS as the standard word\n     * @param {number} [fwpm=wpm] - the Farnsworth speed in words per minute (defaults to wpm)\n     */\n    constructor(useProsigns = true, wpm = 20, fwpm = wpm) {\n        super(useProsigns);\n        /** @type {number} */\n        this.wpm = wpm;\n        /** @type {number} */\n        this.fwpm = fwpm;\n    }\n\n    /** \n     * Set the WPM speed. Ensures that Farnsworth WPM is no faster than WPM.\n     * @type {number} */\n    set wpm(wpm) {\n        this._wpm = wpm;\n        if (wpm < this._fwpm) {\n            this._fwpm = wpm;\n        }\n    }\n\n    /** @type {number} */\n    get wpm() {\n        return this._wpm;\n    }\n\n    /**\n     * Set the Farnsworth WPM speed. Ensures that WPM is no slower than Farnsworth WPM.\n     *  @type {number} */\n    set fwpm(fwpm) {\n        this._fwpm = fwpm;\n        if (fwpm > this._wpm) {\n            this._wpm = fwpm;\n        }\n    }\n\n    /** @type {number} */\n    get fwpm() {\n        return this._fwpm;\n    }\n\n    /** \n     * Get the length of the space between words in ms.\n     * @type {number} */\n    get wordSpace() {\n        return WPM.wordSpace(this._wpm, this._fwpm);\n    }\n\n    /**\n     * Return an array of millisecond timings.\n     * With the Farnsworth method, the morse characters are played at one\n     * speed and the spaces between characters at a slower speed.\n     * @return {number[]}\n     */\n    getTimings() {\n        return MorseCW.getTimingsGeneral(\n            WPM.ditLength(this._wpm),\n            WPM.dahLength(this._wpm),\n            WPM.ditSpace(this._wpm),\n            WPM.charSpace(this._wpm, this._fwpm),\n            WPM.wordSpace(this._wpm, this._fwpm),\n            this.morse\n        );\n    }\n\n    /**\n     * Return an array of millisecond timings.\n     * Each sound and space has a duration. The durations of the spaces are distinguished by being negative.\n     * @param {number} dit - the length of a dit in milliseconds\n     * @param {number} dah - the length of a dah in milliseconds (normally 3 * dit)\n     * @param {number} ditSpace - the length of an intra-character space in milliseconds (1 * dit)\n     * @param {number} charSpace - the length of an inter-character space in milliseconds (normally 3 * dit)\n     * @param {number} wordSpace - the length of an inter-word space in milliseconds (normally 7 * dit)\n     * @param {string} morse - the (canonical) morse code string (matching [.-/ ]*)\n     * @return {number[]}\n     */\n    static getTimingsGeneral(dit, dah, ditSpace, charSpace, wordSpace, morse) {\n        //console.log(\"Morse: \" + morse);\n        morse = morse.replace(/ \\/ /g, '/');  // this means that a space is only used for inter-character\n        morse = morse.replace(/([\\.\\-])(?=[\\.\\-])/g, \"$1+\");  // put a + in between all dits and dahs\n        var times = [];\n        for (var i = 0; i < morse.length; i++) {\n            switch (morse[i]) {\n                case '.':\n                    times.push(dit);\n                    break;\n                case '-':\n                    times.push(dah);\n                    break;\n                case '+':\n                    times.push(-ditSpace);\n                    break;\n                case \" \":\n                    times.push(-charSpace);\n                    break;\n                case \"/\":\n                    times.push(-wordSpace);\n                    break;\n            }\n        }\n        //console.log(\"Timings: \" + times);\n        return times;\n    }\n\n    /**\n     * Get the total duration of the message in ms\n     8 @return {number}\n     */\n    getDuration() {\n        var times = this.getTimings();\n        var t = 0;\n        for (var i = 0; i < times.length; i++) {\n            t += Math.abs(times[i]);\n        }\n        return t;\n    }\n}\n","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport * as Morse from './morse-pro';\n\n/**\n * Class for conveniently translating to and from Morse code.\n * Deals with error handling.\n * Works out if the input is Morse code or not.\n *\n * @example\n * import MorseMessage from 'morse-pro-message';\n * var morseMessage = new MorseMessage();\n * var input;\n * var output;\n * try {\n *     output = morseMessage.translate(\"abc\");\n * catch (ex) {\n *     // input will have errors surrounded by paired '#' signs\n *     // output will be best attempt at translation, with untranslatables replaced with '#'\n *     morseMessage.clearError();  // remove all the '#'\n * }\n * if (morseMessage.inputWasMorse) {\n *     // do something\n * }\n */\nexport default class MorseMessage {\n    /**\n     * @param {boolean} [prosigns=true] - whether or not to include prosigns in the translations\n     */\n    constructor(useProsigns = true) {\n        this.useProsigns = useProsigns;\n        this.input = \"\";\n        this.output = \"\";\n        this.morse = \"\";\n        this.message = \"\";\n        this.inputWasMorse = undefined;\n        this.hasError = undefined;\n    }\n\n    /**\n     * @param {string} input - alphanumeric text or morse code to translate\n     * @param {boolean} isMorse - whether the input is Morse code or not (if not set then the looksLikeMorse method will be used)\n     */\n    translate(input, isMorse) {\n        var translation;\n\n        if (typeof isMorse === \"undefined\") {\n            // make a guess: could be wrong if someone wants to translate \".\" into Morse for instance\n            isMorse = Morse.looksLikeMorse(input);\n        }\n        if (isMorse) {\n            this.inputWasMorse = true;\n            translation = Morse.morse2text(input, this.useProsigns);\n        } else {\n            this.inputWasMorse = false;\n            translation = Morse.text2morse(input, this.useProsigns);\n        }\n\n        this.morse = translation.morse;\n        this.message = translation.message;\n\n        if (this.inputWasMorse) {\n            this.input = this.morse;\n            this.output = this.message;\n        } else {\n            this.input = this.message;\n            this.output = this.morse;\n        }\n\n        this.hasError = translation.hasError;\n        if (this.hasError) {\n            throw new Error(\"Error in input\");\n        }\n        return this.output;\n    }\n\n    /**\n     * Clear all the errors from the morse and message. Useful if you want to play the sound even though it didn't translate.\n     */\n    clearError() {\n        if (this.inputWasMorse) {\n            this.morse = this.morse.replace(/#/g, \"\");  // leave in the bad Morse\n        } else {\n            this.message = this.message.replace(/#[^#]*?#/g, \"\");\n            this.morse = this.morse.replace(/#/g, \"\");\n        }\n        this.hasError = false;\n    }\n}\n","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\nimport MorsePlayerWAA from './morse-pro-player-waa';\n\n/**\n * Web browser sound player using Web Audio API.\n * Extends MorsePlayerWAA to provide callbacks when the sound goes on or off.\n * Can be used to turn a light on or off in time with the Morse sound.\n * The callbacks have an error of +/- 2.6ms\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * import MorsePlayerWAALight from 'morse-pro-player-waa-light';\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var morsePlayerWAALight = new MorsePlayerWAALight();\n * morsePlayerWAALight.soundOnCallback = lightOn;\n * morsePlayerWAALight.soundOffCallback = lightOff;\n * morsePlayerWAALight.soundStoppedCallback = soundStopped;\n * morsePlayerWAALight.volume = 0;\n * morsePlayerWAALight.loadCWWave(morseCWWave);\n * morsePlayerWAA.playFromStart();\n */\nexport default class MorsePlayerWAALight extends MorsePlayerWAA {\n    /**\n     * @param {function()} sequenceStartCallback - function to call each time the sequence starts.\n     * @param {function()} sequenceEndingCallback - function to call when the sequence is nearing the end.\n     * @param {function()} soundStoppedCallback - function to call when the sequence stops.\n     * @param {function()} soundOnCallback - function to call wth the note number as the argument when a beep starts.\n     * @param {function()} soundOffCallback - function to call with the note number as the argument when a beep stops.\n     */\n    constructor(sequenceStartCallback, sequenceEndingCallback, soundStoppedCallback, soundOnCallback, soundOffCallback) {\n        super(sequenceStartCallback, sequenceEndingCallback, soundStoppedCallback);\n        if (soundOnCallback !== undefined) this.soundOnCallback = soundOnCallback;\n        if (soundOffCallback !== undefined) this.soundOffCallback = soundOffCallback;\n        this._wasOn = false;\n        this._count = 0;\n    }\n\n    /**\n     * Set up the audio graph, connecting the splitter node to a JSNode in order to analyse the waveform\n     * @access: private\n     * @override\n     */\n    _initialiseAudioNodes() {\n        super._initialiseAudioNodes();\n        this.jsNode = this.audioContext.createScriptProcessor(256, 1, 1);\n        this.jsNode.connect(this.audioContext.destination);  // otherwise Chrome ignores it\n        this.jsNode.onaudioprocess = this._processSound.bind(this);\n        this.splitterNode.connect(this.jsNode);\n    }\n\n    /**\n     * @override\n     */\n    load(timings) {\n        this._timings = timings;\n        super.load(timings);\n    }\n\n    /**\n     * @access: private\n     */\n    _processSound(event) {\n        var input = event.inputBuffer.getChannelData(0);\n        var sum = 0;\n        for (var i = 0; i < input.length; i++) {\n            sum += Math.abs(input[i]) > 0;\n        }\n        var on = (sum > 128);  // is more than half the buffer non-zero?\n        if (on && !this._wasOn) {\n            this._on();\n        } else if (!on && this._wasOn) {\n            this._off();\n        }\n        this._wasOn = on;\n    }\n\n    /**\n     * @access: private\n     * @override\n     */\n    _on() {\n        this.soundOnCallback(this._timings[this._count]);\n        this._count = (this._count + 1) % this._timings.length;\n    }\n\n    /**\n     * @access: private\n     * @override\n     */\n    _off() {\n        this.soundOffCallback(this._timings[this._count]);\n        this._count = (this._count + 1) % this._timings.length;\n    }\n\n    /**\n     * @returns {number} representing this audio player type: 5\n     * @override\n     */\n    get audioType() {\n        return 5;\n        // 5: Web Audio API using oscillators and light control\n        // 4: Web Audio API using oscillators\n        // 3: Audio element using media stream worker (using PCM audio data)\n        // 2: Flash (using PCM audio data)\n        // 1: Web Audio API with webkit and native support (using PCM audio data)\n        // 0: Audio element using Mozilla Audio Data API (https://wiki.mozilla.org/Audio_Data_API) (using PCM audio data)\n        // -1: no audio support\n    }\n\n    // empty callbacks in case user does not define any\n    soundOnCallback(noteNumber) { }\n    soundOffCallback(noteNumber) { }\n}\n","/*!\nThis code is © Copyright Stephen C. Phillips, 2018.\nEmail: steve@scphillips.com\n*/\n/*\nLicensed under the EUPL, Version 1.2 or – as soon they will be approved by the European Commission - subsequent versions of the EUPL (the \"Licence\");\nYou may not use this work except in compliance with the Licence.\nYou may obtain a copy of the Licence at: https://joinup.ec.europa.eu/community/eupl/\nUnless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Licence for the specific language governing permissions and limitations under the Licence.\n*/\n\n/**\n * Web browser sound player using Web Audio API.\n *\n * @example\n * import MorseCWWave from 'morse-pro-cw-wave';\n * import MorsePlayerWAA from 'morse-pro-player-waa';\n * var morseCWWave = new MorseCWWave();\n * morseCWWave.translate(\"abc\");\n * var morsePlayerWAA = new MorsePlayerWAA();\n * morsePlayerWAA.loadCWWave(morseCWWave);\n * morsePlayerWAA.playFromStart();\n */\nexport default class MorsePlayerWAA {\n    /**\n     * @param {function()} sequenceStartCallback - function to call each time the sequence starts.\n     * @param {function()} sequenceEndingCallback - function to call when the sequence is nearing the end.\n     * @param {function()} soundStoppedCallback - function to call when the sequence stops.\n     */\n    constructor(sequenceStartCallback, sequenceEndingCallback, soundStoppedCallback) {\n        if (sequenceStartCallback !== undefined) this.sequenceStartCallback = sequenceStartCallback;\n        if (sequenceEndingCallback !== undefined) this.sequenceEndingCallback = sequenceEndingCallback;\n        if (soundStoppedCallback !== undefined) this.soundStoppedCallback = soundStoppedCallback;\n        this._noAudio = false;\n        console.log(\"Trying Web Audio API (Oscillators)\");\n        this.audioContextClass = window.AudioContext || window.webkitAudioContext;\n        if (this.audioContextClass === undefined) {\n            this._noAudio = true;\n            throw (new Error(\"No AudioContext class defined\"));\n        }\n\n        this.loop = false;\n        this.frequency = undefined;\n        this.startPadding = 0;  // number of ms to wait before playing first note of initial sequence\n        this.endPadding = 0;  // number of ms to wait at the end of a sequence before playing the next one (or looping)\n\n        this._cTimings = [];\n        this._isPlaying = false;\n        this._isPaused = false;\n        this._volume = 1;\n        this._lookAheadTime = 0.1;  // seconds\n        this._timerInterval = 0.05;  // seconds\n        this._timer = undefined;\n        this._stopTimer = undefined;\n        this._notPlayedANote = true;\n    }\n\n    /**\n     * Set up the audio graph\n     * @access: private\n     */\n    _initialiseAudioNodes() {\n        this.audioContext = new this.audioContextClass();\n        this.splitterNode = this.audioContext.createGain();  // this node is here to attach other nodes to in subclass\n        this.lowPassNode = this.audioContext.createBiquadFilter();\n        this.lowPassNode.type = \"lowpass\";\n        // TODO: remove this magic number and make the filter configurable?\n        this.lowPassNode.frequency.setValueAtTime(this.frequency * 1.1, this.audioContext.currentTime);\n        this.gainNode = this.audioContext.createGain();  // this node is actually used for volume\n        this.volume = this._volume;\n        this.splitterNode.connect(this.lowPassNode);\n        this.lowPassNode.connect(this.gainNode);\n        this.gainNode.connect(this.audioContext.destination);\n        this._notPlayedANote = true;\n    }\n\n    /**\n     * Set the volume for the player\n     * @param {number} v - the volume, clamped to [0,1]\n     */\n    set volume(v) {\n        this._volume = Math.min(Math.max(v, 0), 1);\n        try {\n            // multiply by 0.813 to reduce gain added by lowpass filter and avoid clipping\n            this.gainNode.gain.setValueAtTime(0.813 * this._volume, this.audioContext.currentTime);\n        } catch (ex) {\n            // getting here means _initialiseAudioNodes() has not yet been called: that's okay\n        }\n    }\n\n    /**\n     * @returns {number} the current volume [0,1]\n     */\n    get volume() {\n        return this._volume;\n    }\n\n    /**\n     * Convenience method to help playing directly from a MorseCWWave instance. Uses the CWWave timings and frequency.\n     * @param {Object} cwWave - a MorseCWWave instance\n     */\n    loadCWWave(cwWave) {\n        this.load(cwWave.getTimings());\n        this.frequency = cwWave.frequency;\n    }\n\n    /**\n     * Load timing sequence, replacing any existing sequence.\n     * If endPadding is non-zero then an appropriate pause is added to the end.\n     * @param {number[]} timings - list of millisecond timings; +ve numbers are beeps, -ve numbers are silence\n     */\n    load(timings) {\n        // TODO: undefined behaviour if this is called in the middle of a sequence\n\n        // console.log('Timings: ' + timings);\n        /*\n            The ith element of the sequence starts at _cTimings[i] and ends at _cTimings[i+1] (in fractional seconds)\n            It is a note (i.e. not silence) if isNote[i] === True\n        */\n\n        if (this.endPadding > 0) {\n            timings.push(-this.endPadding);\n        }\n\n        this._cTimings = [0];\n        this.isNote = [];\n        for (var i = 0; i < timings.length; i++) {\n            this._cTimings[i + 1] = this._cTimings[i] + Math.abs(timings[i]) / 1000;  // AudioContext runs in seconds not ms\n            this.isNote[i] = timings[i] > 0;\n        }\n        this.sequenceLength = this.isNote.length;\n    }\n\n    /**\n     * Convenience method to help playing directly from a MorseCWWave instance. Uses the CWWave timings.\n     * @param {Object} cwWave - a MorseCWWave instance\n     */\n    loadNextCWWave(cwWave) {\n        this.loadNext(cwWave.getTimings());\n    }\n\n    /**\n     * Load timing sequence which will be played when the current sequence is completed (only one sequence is queued).\n     * @param {number[]} timings - list of millisecond timings; +ve numbers are beeps, -ve numbers are silence\n     */\n    loadNext(timings) {\n        this.upNext = timings;\n    }\n\n    /**\n     * Plays the loaded timing sequence from the start, regardless of whether playback is ongoing or paused.\n     */\n    playFromStart() {\n        // TODO: why do we have this method at all? Better just to have play() and if user needs playFromStart, just call stop() first?\n        if (this._noAudio || this._cTimings.length === 0) {\n            return;\n        }\n        this.stop();\n        this._initialiseAudioNodes();\n        this._nextNote = 0;\n        this._isPlaying = true;\n        this._isPaused = true;  // pretend we were paused so that play() \"resumes\" playback\n        this.play();\n    }\n\n    /**\n     * Starts or resumes playback of the loaded timing sequence.\n     */\n    play() {\n        if (!this._isPlaying) {\n            // if we're not actually playing then play from start\n            this.playFromStart();\n        }\n        // otherwise we are resuming playback after a pause\n        if (!this._isPaused) {\n            // if we're not actually paused then do nothing\n            return;\n        }\n        // otherwise we really are resuming playback (or pretending we are, and actually playing from start...)\n        clearInterval(this._stopTimer);  // if we were going to send a soundStoppedCallback then don't\n        clearInterval(this._startTimer);  // ditto\n        clearInterval(this._timer);\n        this._isPaused = false;\n        // basically set the time base to now but \n        //    - to work after a pause: subtract the start time of the next note so that it will play immediately\n        //    - to avoid clipping the very first note: add on startPadding if notPlayedANote\n        this._tZero = this.audioContext.currentTime - \n            this._cTimings[this._nextNote] + \n            (this._notPlayedANote ? this.startPadding / 1000 : 0);\n        // schedule the first note ASAP (directly) and then if there is more to schedule, set up an interval timer\n        if (this._scheduleNotes()) {\n            this._timer = setInterval(function() {\n                this._scheduleNotes();\n            }.bind(this), 1000 * this._timerInterval);  // regularly check to see if there are more notes to schedule\n        }\n    }\n\n    /**\n     * Pause playback (resume with play())\n     */\n    pause() {\n        if (!this._isPlaying) {\n            // if we're not actually playing then ignore this\n            return;\n        }\n        this._isPaused = true;\n        clearInterval(this._timer);\n\n        // ensure that the next note that is scheduled is a beep, not a pause (to help sync with vibration patterns)\n        if (!this.isNote[this._nextNote]) {\n\n            this._nextNote++;\n\n            // if we'e got to the end of the sequence, then loop or load next sequence as appropriate\n            if (this._nextNote === this.sequenceLength) {\n                if (this.loop || this.upNext !== undefined) {\n                    this._nextNote = 0;\n                    if (this.upNext !== undefined) {\n                        this.load(this.upNext);\n                        this.upNext = undefined;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Stop playback (calling play() afterwards will start from the beginning)\n     */\n    stop() {\n        if (this._isPlaying) {\n            this._isPlaying = false;\n            this._isPaused = false;\n            clearInterval(this._timer);\n            clearInterval(this._stopTimer);\n            clearInterval(this._startTimer);\n            this.audioContext.close();\n            this.soundStoppedCallback();\n        }\n    }\n\n    /**\n     * Schedule notes that start before now + lookAheadTime.\n     * @return {boolean} true if there is more to schedule, false if sequence is complete\n     * @access: private\n     */\n    _scheduleNotes() {\n        // console.log('Scheduling:');\n        var oscillator, start, end;\n        var now = this.audioContext.currentTime;\n        while (this._nextNote < this.sequenceLength && \n                (this._cTimings[this._nextNote] < now - this._tZero + this._lookAheadTime)) {\n            this._notPlayedANote = false;\n            // console.log('T: ' + Math.round(1000 * now)/1000 + ' (+' + Math.round(1000 * (now - this._tZero))/1000 + ')');\n            // console.log(this._nextNote + ': ' + \n            //     (this.isNote[this._nextNote] ? 'Note  ' : 'Pause ') + \n            //     Math.round(1000 * this._cTimings[this._nextNote])/1000 + ' - ' + \n            //     Math.round(1000 * this._cTimings[this._nextNote + 1])/1000 + ' (' + \n            //     Math.round(1000 * (this._cTimings[this._nextNote + 1] - this._cTimings[this._nextNote]))/1000 + ')');\n            if (this._nextNote === 0 && !this.sequenceStartCallbackFired) {\n                // when scheduling the first note, schedule a callback as well\n                this._startTimer = setTimeout(function() {\n                    this.sequenceStartCallback();\n                }.bind(this), 1000 * (this._tZero + this._cTimings[this._nextNote] - now));\n                this.sequenceStartCallbackFired = true;\n            }\n            if (this.isNote[this._nextNote]) {\n                start = this._tZero + this._cTimings[this._nextNote];\n                end   = this._tZero + this._cTimings[this._nextNote + 1];\n                this._soundEndTime = end;  // we need to store this for the stop() callback\n                oscillator = this.audioContext.createOscillator();\n                oscillator.type = 'sine';\n                oscillator.frequency.setValueAtTime(this.frequency, start);\n                oscillator.start(start);\n                oscillator.stop(this._soundEndTime);\n                oscillator.connect(this.splitterNode);\n            }\n\n            this._nextNote++;\n\n            if (this._nextNote === this.sequenceLength) {\n                if (this.loop || this.upNext !== undefined) {\n                    // increment time base to be the absolute end time of the final element in the sequence\n                    this._tZero += this._cTimings[this._nextNote];\n                    this._nextNote = 0;\n                    if (this.upNext !== undefined) {\n                        this.load(this.upNext);\n                        this.upNext = undefined;\n                    }\n                }\n            }\n        }\n\n        if (this._nextNote === this.sequenceLength) {\n            // then all notes have been scheduled and we are not looping\n            clearInterval(this._timer);\n            // schedule stop() for after when the scheduled sequence ends\n            // adding on 3 * lookAheadTime for safety but shouldn't be needed\n            this._stopTimer = setTimeout(function() {\n                this.stop();\n            }.bind(this), 1000 * (this._soundEndTime - now + 3 * this._lookAheadTime));\n            return false;  // indicate that sequence is complete\n        } else if (now - this._tZero + this._timerInterval + this._lookAheadTime > this._cTimings[this.sequenceLength - 1] && \n                this.sequenceStartCallbackFired) {\n            // then we are going to schedule the last note in the sequence next time\n            this.sequenceEndingCallback();\n            this.sequenceStartCallbackFired = false;\n        }\n        return true;  // indicate there are more notes to schedule\n    }\n\n    /**\n     * @returns {boolean} whether there was an error in initialisation\n     */\n    hasError() {\n        return this._noAudio;\n    }\n\n    /**\n     * @returns {boolean} whether a sequence is being played or not (still true even when paused); becomes false when stop is used\n     */\n    get isPlaying() {\n        return this._isPlaying;\n    }\n\n    /**\n     * @returns {boolean} whether the playback is paused or not\n     */\n    get isPaused() {\n        return this._isPaused;\n    }\n\n    /**\n     * Return the index of the next note in the sequence to be scheduled.\n     * Useful if the sequence has been paused.\n     * @returns {number} note index\n     */\n    get nextNote() {\n        return this._nextNote;\n    }\n\n    /**\n     * @returns {number} representing this audio player type: 4\n     */\n    get audioType() {\n        return 4;\n        // 4: Web Audio API using oscillators\n        // 3: Audio element using media stream worker (using PCM audio data)\n        // 2: Flash (using PCM audio data)\n        // 1: Web Audio API with webkit and native support (using PCM audio data)\n        // 0: Audio element using Mozilla Audio Data API (https://wiki.mozilla.org/Audio_Data_API) (using PCM audio data)\n        // -1: no audio support\n    }\n\n    // empty callbacks in case user does not define any\n    sequenceStartCallback() { }\n    sequenceEndingCallback() { }\n    soundStoppedCallback() { }\n}\n","import React  from 'react';\nimport Modal  from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst MorseModal = ({modalContent, ...props}) => {\n  return (\n    <>\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Morse Code\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"text-center\">\n        <img src=\"International_Morse_Code-fr.png\" alt=\"morse code table\"/>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"outline-danger\"\n          size=\"lg\"\n          onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n    </>\n  );\n}\n\nexport default MorseModal;\n","import React from 'react';\n\nconst Button = ({id = '', iconStyle = 'fas', icon, title, onClick}) => {\n\n  return (\n    <button\n      id={id}\n      className=\"my-lg-3 mx-3 btn btn-outline-primary rounded-circle d-flex justify-content-center align-items-center fz-20\"\n      title={title}\n      onClick={onClick}>\n      <i className={iconStyle + \" fa-\" + icon}></i>\n    </button>\n  );\n}\n\nexport default Button;\n","function download(filename, text) {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nexport default download;\n","import React, { useState } from 'react';\n// Morse\nimport { text2morse, morse2text } from './morse-pro/src/morse-pro.js';\nimport MorseCWWave                from './morse-pro/src/morse-pro-cw-wave.js';\nimport MorsePlayerWAALight        from './morse-pro/src/morse-pro-player-waa-light.js';\n// Components\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport MorseModal          from './components/MorseModal.js';\nimport Button              from './components/Button.js';\n//--Toastify\nimport { ToastContainer, toast, Slide, Bounce } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// Helpers\nimport download from './helpers/download.js';\n// CSS\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const explanation =\n  `\n  Morse code translater\n  ===================\n  Translation\n  -------------------\n  ❌  If text contains letters translate text2morse\n      otherwise translate morse2text\n\n  Morse\n  -----------\n  ❌  Type . & - for morse code\n  ❌  a space separates letters of the same word\n  ❌  / separates morse words\n  ❌  # is an unrecognized character\n  `;\n  const [input, setInput]             = useState('');\n  const [output, setOutput]           = useState(text2morse(input).morse);\n  const [audioPlayer, setAudioPlayer] = useState(false);\n  const [modalShow, setModalShow]     = React.useState(false);\n\n\n  const translate = (value) => (value.match(/\\w/)) ? text2morse(value).morse : morse2text(value).message;\n\n\n  const handleReset = () => {\n    setInput('');\n    setOutput('');\n    document.querySelector('#input').focus();\n  };\n\n\n  const handleChange = ({currentTarget}) => {\n    let value = currentTarget.value;\n    setInput(value);\n    setOutput(translate(value));\n  };\n\n\n  const handleSwap = () => {\n    setInput(output);\n    setOutput(input);\n    //rotate 180° Swap btn\n    document.querySelector('#swap').animate([\n      {transform: \"rotate(0deg)\"},\n      {transform: \"rotate(180deg)\"}\n    ], {duration: 300});\n  };\n\n\n  const handleCopy = () => {\n    if(output.length === 0) {\n      toast.error('Nothing to copy !', { autoClose: 1500 });\n    } else {\n      toast.info('Copied to clipboard !', { autoClose: 1500 });\n    }\n  };\n\n\n  const handleDownload = () => {\n    if(output.length === 0) {\n      toast.error('Nothing to download !', { autoClose: 1500 });\n    } else {\n      download(\"morse.txt\", output);\n    }\n  };\n\n\n  const handleAudio = () => {\n    //is playing already ?\n    if(audioPlayer.isPlaying === true) {\n      audioPlayer.stop();\n      return false;\n    }\n    //------------------------------------------\n    //create sine-wave\n    let morseCWWave = new MorseCWWave();\n    try {\n      morseCWWave.translate(output);\n    } catch(error) {\n      toast.error(\"# Unrecognized character !\");\n      return false;\n    }\n    //=============================================\n    //style button\n    let audioBtn = document.querySelector('#audio');\n    audioBtn.setAttribute('style', 'transition: all 0s ease !important;');\n    const toggleIcon = () => {\n      audioBtn.firstElementChild.classList.toggle('fa-play');\n      audioBtn.firstElementChild.classList.toggle('fa-stop');\n    };\n    toggleIcon();\n    //=============================================\n    //setup player & light\n    let morsePlayerWAALight = new MorsePlayerWAALight();\n    setAudioPlayer(morsePlayerWAALight);\n    //blink button\n    const lightOn      = () => audioBtn.classList.add('active');\n    const lightOff     = () => audioBtn.classList.remove('active');\n    //audio end\n    const soundStopped = () => {\n      toggleIcon();\n      audioBtn.setAttribute('style', '');\n    };\n    //assignment\n    morsePlayerWAALight.soundOnCallback = lightOn;\n    morsePlayerWAALight.soundOffCallback = lightOff;\n    morsePlayerWAALight.soundStoppedCallback = soundStopped;\n    morsePlayerWAALight.volume = 1;\n    //=============================================\n    //play sine-wave\n    morsePlayerWAALight.loadCWWave(morseCWWave);\n    morsePlayerWAALight.playFromStart();\n  };\n\n  return (\n    <>\n    <main className=\"container h-90 d-flex justify-content-center align-items-center\">\n      <div className=\"row w-100 h-75 flex-lg-row flex-column-reverse\">\n        {/*LEFT BUTTONS*/}\n        <nav className=\"row col-lg-1 py-lg-3 py-1 justify-content-center flex-lg-column justify-content-lg-start\">\n          {/*reset input*/}\n          <Button\n          icon=\"times\"\n          title=\"Reset\"\n          onClick={handleReset}/>\n          {/*morse code table*/}\n          <Button\n          icon=\"font\"\n          title=\"Morse Table\"\n          data-toggle=\"modal\"\n          data-target=\"#alphabet\"\n          onClick={() => setModalShow(true)}/></nav>\n\n        {/*INPUT*/}\n        <textarea\n        id=\"input\"\n        className=\"col m-2 p-3 h-100 border bg-light thin-scrollbar fz-16\"\n        onChange={handleChange}\n        autoFocus\n        placeholder={explanation}\n        value={input}></textarea>\n\n        {/*SWAP*/}\n        <nav className=\"row col-lg-1 py-1 flex-column justify-content-center align-items-center\">\n          <Button\n          id=\"swap\"\n          icon=\"sync-alt\"\n          title=\"Swap\"\n          onClick={handleSwap}/></nav>\n\n        {/*OUTPUT*/}\n        <pre\n        id=\"output\"\n        className=\"col m-2 p-3 h-100 border bg-light thin-scrollbar text-wrap fz-16\">\n        {output}</pre>\n\n        {/*RIGHT BUTTONS*/}\n        <nav className=\"row col-lg-1 py-lg-3 py-1 justify-content-center flex-lg-column justify-content-lg-start\">\n          {/*copy to clipboard*/}\n          <CopyToClipboard\n          text={output}>\n            <Button\n            icon=\"copy\"\n            title=\"Copy\"\n            onClick={handleCopy}/>\n          </CopyToClipboard>\n          {/*download output*/}\n          <Button\n          icon=\"save\"\n          title=\"Download\"\n          onClick={handleDownload}/>\n          {/*audio play*/}\n          <Button\n          id=\"audio\"\n          icon=\"play\"\n          title=\"Play Audio\"\n          onClick={handleAudio}/></nav>\n      </div>\n\n      {/*OVERLAYS*/}\n      <MorseModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        transition={Slide}\n        pauseOnHover={false}\n      />\n    </main>\n\n    <footer className=\"container-fluid text-center fz-12\">\n        <p>This app is a personnal training for React & Bootstrap.</p>\n        <p>The morse API is provided by <a href=\"https://github.com/scp93ch/morse-pro\">@scp93ch</a>, go check his website <a href=\"https://morsecode.world/international/translator.html\">MorseCode.world</a>.</p>\n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}